//Simple Had application with casting
method hadtest(n:nat, q : Q[n])
  requires { q[0, n) : nor ↦ |0⟩ }
  ensures  { q[0, n) : en ↦ ∑ k ∈ [0, 2^n) . 1/sqrt(2^n) | k ⟩ }
{
  // induce superposition on the first qubit
  q[0, n) *= H;
  (en)q[0, n);
  //assert { q [0] : had ↦ ⊗ i . (1) }; 
  // always take the ith qubit as the controller 
  //if (q[0]) { q[1]  *= λ (x => |(x + 1) % 2 ⟩); } //can be remove the % 2, since q[1] is one qubit, why the type checking cannot infer that the % 2 is unnecessary
}

//sp(S, P) = ∃x0. x = S[x0/x] /\ P[x0/x]
// ∃ can be dropped when P does not contain x0; 
// ∃ can be dropped when x0 is fully determined by an equality;

predicate: q[0, n) : nor ↦ |0⟩
loc(u) = q[0, n) : nor ↦ |0⟩
{
  q[0,n) *= H; // translate to x => ∑ k ∈ [0, 2^n) . 1/sqrt(2^n) ω(0 * k, 2) | x ⟩ 
                                === ∑ k ∈ [0, 2^n) . 1/sqrt(2^n) | k ⟩
}
∃u0. loc(u0) = q[0, n) : nor ↦ |0⟩
          /\ loc(u) = 
=== True /\ loc(u) = q[0, n) : en ↦ ∑ k ∈ [0, 2^n) . 1/sqrt(2^n) | k ⟩ 
=== loc(u) = q[0, n) : en ↦ ∑ k ∈ [0, 2^n) . 1/sqrt(2^n) | k ⟩ 